import { DataTypes } from 'sequelize';
import { dbConnection, Status } from '../../../Config/DBConfig';
import { getRoleByID, RoleModel } from './Role';

export const AccountRole = dbConnection.define('AccountRole', {

    //ID is the primary key, a string, and cannot be null
    AccountEmail: {
        type: DataTypes.STRING(320),
        primaryKey: true,
        onDelete: 'CASCADE',
        onUpdate: 'CASCADE'
      },
    RoleID: {
        type: DataTypes.STRING,
        primaryKey: true,
        onDelete: 'CASCADE',
        onUpdate: 'CASCADE'
    }
},

//The name of the table is Role, and do not include timestamps for creation and update
{
    tableName: 'AccountRole',
    createdAt: false,
    updatedAt: false
});

export interface AccountRoleModel {
    AccountEmail: string,
    RoleID: number
};

/**
 * Add an account to the database
 * The validity check is completed before this function gets executed
 * @param accountRoleObj Contains all of the fields needed for the database
 */
export const addAccountRole = async (accountRoleObj: AccountRoleModel) : Promise<Status> => {

    //Keep track of whether the query was successful 
    let success = true;
    let errorMsg = '';

    //Add the Account to the database
    await AccountRole.create({
        AccountEmail: accountRoleObj.AccountEmail,
        RoleID: accountRoleObj.RoleID
    })

    //If unsuccessful, account for the error
    .catch(error => {

        //Include the error message if the error object has the toString method
        if ('toString' in error) {
            errorMsg = error.toString();
        }
        success = false;
    });

    //Return a Promise from this function
    return new Promise<Status>((resolve, reject) => {

        //Declare return object
        let status: Status;

        //If the query was successful...
        if (success) {
            status = {
                code: 200,
                message: `Successfully added role ${accountRoleObj.RoleID} to account ${accountRoleObj.AccountEmail}`
            };
            resolve(status);
        }

        //If the query failed...
        else {

            //Don't need a line break if there is no existing error message
            if (errorMsg === '') {
                errorMsg = `Error adding role ${accountRoleObj.RoleID} to account ${accountRoleObj.AccountEmail}`;
            }

            //Otherwise append a line break and the remaining statement
            else {
                errorMsg += `\nError adding role ${accountRoleObj.RoleID} to account ${accountRoleObj.AccountEmail}`;
            }

            //Create the status object to return
            status = {
                code: 500,
                message: errorMsg
            };

            //Return the status object
            reject(status);
        }
    });

}

/**
 * Get all the roles of an account given the account email
 * @param email 
 * @returns 
 */
export const getAllRolesOfAccount = async (email: string) : Promise<RoleModel[]> => {

    //State mangement variables
    const roles: RoleModel[] = [];
    let status : Status;
    const promises = [];
    let success = true;

    //Query for the roles given the email...
    await dbConnection.query('SELECT * FROM AccountRole WHERE AccountEmail = ?', {
        replacements: [email]
    })
    .then(([results, metadata]) => {

        //On success, get each role model object by the role ID returned by the query above
        results.forEach(([email, id]) => {

            //For each role the user has, save the list of promises generated by getting each role
            promises.push(getRoleByID(id)
            .then(role => roles.push(role))

            //If the role could not be retrieved, notify an internal server error
            .catch(err => {
                status = {
                    code: 500,
                    message: 'Error retrieving roles from the database. Please try again'
                };
                success = false;
            }));
        })
    });

    //Wait for all promises to resolve (i.e., get all roles)
    await Promise.all(promises);

    // console.log(success);
    //Return the new promise
    return new Promise<RoleModel[]>((resolve, reject) => {

        //If there were no errors...
        if(success) {

            //Return the list of roles for the given user
            resolve(roles);
        } else {

            //Otherwise, show why the query failed
            reject(status);
        }
    });

}